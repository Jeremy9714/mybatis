<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jeremy.dao.DepartmentMapper">

    <!--
        collection嵌套结果集的方式，定义关联的集合类型元素的封装规则
    -->

    <resultMap id="MyDept" type="com.jeremy.bean.Department">
        <id column="did" property="id"/>
        <result column="dept_name" property="departmentName"/>

        <!-- collection定义关联集合类型的属性的封装规则
                property属性: 指定了关联的集合是哪个属性
                ofType属性: 指定集合元素的类型
        -->
        <collection property="emps" ofType="com.jeremy.bean.Employee">
            <!-- 定义几何元素的封装规则 -->
            <id column="eid" property="id"/>
            <result column="last_name" property="lastName"/>
            <result column="gender" property="gender"/>
            <result column="email" property="email"/>
        </collection>
    </resultMap>

    <resultMap id="MyDeptStep" type="com.jeremy.bean.Department">
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>

        <!--若传递多列的值，可以将多列的值封装为map传递-->
        <!--fetchType属性可以设置延迟查询还是急查询-->
        <collection property="emps" select="com.jeremy.dao.EmployeeMapperPlus.getEmpListByDeptId"
                    column="{deptId=id}" fetchType="eager">
        </collection>
    </resultMap>

    <select id="getDeptById" resultType="com.jeremy.bean.Department">
        select id, dept_name departmentName from tb_dept where id = #{id}
    </select>

    <!--关联查询集合-->
    <select id="getDeptByIdPlus" resultMap="MyDept">
        SELECT d.`id` did, dept_name, e.id eid, last_name, gender, email
        FROM tb_dept d
        LEFT JOIN tb_employee e
        ON d.`id` = e.`d_id`
        WHERE d.`id` = 1;
    </select>

    <!--分步查询-->
    <select id="getDeptByIdStep" resultMap="MyDeptStep">
        select * from tb_dept where id = #{id}
    </select>

</mapper>