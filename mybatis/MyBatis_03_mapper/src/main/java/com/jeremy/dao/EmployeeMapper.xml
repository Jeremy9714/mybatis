<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace:名称空间-->
<mapper namespace="com.jeremy.dao.EmployeeMapper">

    <!--传入单个参数时的处理
        直接通过#{参数名}来取值
    -->
    <select id="getEmp" resultType="com.jeremy.bean.Employee" databaseId="mysql">
        select *
        from tb_employee
        where id = #{id}
    </select>

    <!--传入多个参数时的处理: 多个参数会被封装到一个map中，key值是参数索引(0...N)或者Param1...ParamN-->
    <!--
        方式一: 通过#{参数的索引}来取值
        方式二: 命名参数，通过@Param注解明确指定封装参数时map的key值; 通过#{指定key值}来取值
    -->
    <select id="getEmpByIdAndLastName" resultType="com.jeremy.bean.Employee">
        select *
        from tb_employee
        where id = #{id} and last_name = #{lastName}
    </select>

    <!--方式三: 直接传入map集合; 通过#{key}来取值-->
    <select id="getEmpByMap" resultType="com.jeremy.bean.Employee">
        select *
        from tb_employee
        where id = #{id} and last_name = #{lastName}
    </select>

    <!--
        useGeneratedKeys属性: 获取自增的主键值
        keyProperty属性: 指定将获取的主键值封装到javaBean的哪个属性中
    -->
    <insert id="addEmp" parameterType="com.jeremy.bean.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into tb_employee(last_name, gender, email)
        values (#{lastName}, #{gender}, #{email})
    </insert>

    <!--获取非自增的主键值-->
    <insert id="addEmp" databaseId="oracle">
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            select XXX_SEQ.nextval from db_mybatis
        </selectKey>
        insert into tb_employee(EMPLOYEE_ID, LAST_NAME, GENDER, EMAIL)
        values(#{id},#{lastName},#{gender}, #{email})
    </insert>

    <delete id="deleteEmp">
        delete
        from tb_employee
        where id = #{id}
    </delete>

    <update id="updateEmp">
        update tb_employee
        set last_name = #{lastName}, gender = #{gender}, email = #{email}
        where id = #{id}
    </update>

</mapper>